#pragma once
enum TokenType
{
    PRIMATIVE_TYPE_ANNOTATION,
    CONTROL_FLOW,
    IMPORT,
    FROM,
    ACCESS_MODIFIER,
    RETURN,
    VARIABLE_DECLARATION,
    FUNCTION_DECLARATION,

    IDENTIFIER,

    INT,
    BOOL,
    LONG,
    DOUBLE,
    STRING,
    CHAR,

    SEMICOLON,
    NEW_LINE,
    OPEN_PAREN,
    CLOSE_PAREN,
    OPEN_CURLY,
    CLOSE_CURLY,
    OPEN_BRACKET,
    CLOSE_BRACKET,
    DOLLAR_SIGN,
    PERIOD,
    COMMA,
    COLON,
    QUESTION_MARK,
    AT_SYMBOL,
    ASSIGN_OPERATOR,
    LAMBDA,

    // OPERATORS
    PLUS_OPERATOR,
    MINUS_OPERATOR,
    MULT_OPERATOR,
    DIV_OPERATOR,
    FLOAT_DIV_OPERATOR,
    MOD_OPERATOR,
    SHIFT_RIGHT_OPERATOR,
    SHIFT_LEFT_OPERATOR,
    BITWISE_OR_OPERATOR,
    BITWISE_AND_OPERATOR,
    BITWISE_INVERT_OPERATOR,
    XOR_OPERATOR,

    OR_OPERATOR,
    AND_OPERATOR,
    NULLISH_COALESCING_OPERATOR,
    NOT_OPERATOR,
    EQUALS_OPERATOR,
    STRICT_EQUALS_OPERATOR,
    LT_OPERATOR,
    GT_OPERATOR,
    LTE_OPERATOR,
    GTE_OPERATOR,

    PLUS_EQUALS_OPERATOR,
    MINUS_EQUALS_OPERATOR,
    DIV_EQUALS_OPERATOR,
    FLOAT_DIV_EQUALS_OPERATOR,
    MOD_EQUALS_OPERATOR,

    SHIFT_RIGHT_EQUALS_OPERATOR,
    SHIFT_LEFT_EQUALS_OPERATOR,
    BITWISE_OR_EQUALS_OPERATOR,
    BITWISE_AND_EQUALS_OPERATOR,
    BITWISE_INVERT_EQUALS_OPERATOR,
    XOR_EQUALS_OPERATOR
};